{"version":3,"sources":["utils/fetchClient.ts","utils/helpers.tsx","components/PostItem.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/CommentItem.tsx","components/CommentsList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","deleteComment","commentId","addNewComment","newComment","PostItem","post","selectedPost","setSelectedPost","setComments","setIsLoading","setHasError","handleSelectedPost","chosenPost","a","id","postId","commentsFromServer","title","className","type","cn","onClick","PostsList","posts","map","Loader","NewCommentForm","setTempComment","isLoading","useState","newName","setNewName","newEmail","setNewEmail","newText","setNewText","formErrors","setFormErrors","handleSubmit","event","preventDefault","isError","prev","name","trim","email","temporaryComment","addedComment","prevComments","onSubmit","htmlFor","placeholder","includes","value","onChange","target","filter","err","CommentItem","comment","handleDeleteComment","currComment","href","CommentsList","comments","tempComment","PostDetails","hasError","showCommentForm","setShowCommentForm","elementToRender","length","UserSelector","users","selectedUser","setSelectedUser","setPosts","isListVisible","setIsListVisible","handleSelectedUser","user","userId","postsFromServer","role","App","setUsers","useEffect","usersFromServer","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b7ee1afb.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","// import { Post } from '../types/Post';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment } from '../types/Comment';\n\nimport { client } from './fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addNewComment = (newComment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', newComment);\n};\n\n// Add more methods here\n\n// export const createTodo = (userId: number, data: Omit<Todo, 'id'>) => {\n//   return client.post<Todo>(`/todos?userId=${userId}`, data);\n// };\n\n// export const deleteTodo = (todoId: number) => {\n//   return client.delete<number>(`/todos/${todoId}`);\n// };\n\n// export const editTodo = (todoId: number, data: Partial<Todo>) => {\n//   return client.patch<Todo>(`/todos/${todoId}`, data);\n// };\n","import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\nimport { getComments } from '../utils/helpers';\nimport { Comment } from '../types/Comment';\nimport { LoadingItems } from '../types/LoadingItems';\nimport { HasErrorItem } from '../types/ErrorMessage';\n\ntype Props = {\n  post: Post;\n  selectedPost: Post | null,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setIsLoading: React.Dispatch<React.SetStateAction<LoadingItems>>,\n  setHasError: React.Dispatch<React.SetStateAction<HasErrorItem>>,\n};\n\nexport const PostItem: React.FC<Props> = ({\n  post,\n  selectedPost,\n  setSelectedPost,\n  setComments,\n  setIsLoading,\n  setHasError,\n}) => {\n  const handleSelectedPost = async (chosenPost: Post) => {\n    try {\n      if (selectedPost?.id === post.id) {\n        setSelectedPost(null);\n\n        return;\n      }\n\n      setSelectedPost(chosenPost);\n      setIsLoading('Comments');\n\n      const commentsFromServer = await getComments(chosenPost.id);\n\n      setComments(commentsFromServer);\n    } catch {\n      setHasError('Comments');\n    } finally {\n      setIsLoading('');\n    }\n  };\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={cn('button is-link', {\n            'is-light': selectedPost?.id !== post.id,\n          })}\n          onClick={() => handleSelectedPost(post)}\n        >\n          {selectedPost?.id !== post.id ? 'Open' : 'Close'}\n        </button>\n      </td>\n    </tr>\n\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { PostItem } from './PostItem';\nimport { Comment } from '../types/Comment';\nimport { LoadingItems } from '../types/LoadingItems';\nimport { HasErrorItem } from '../types/ErrorMessage';\n\ntype Props = {\n  posts: Post[] | null;\n  selectedPost: Post | null,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>\n  setIsLoading: React.Dispatch<React.SetStateAction<LoadingItems>>,\n  setHasError: React.Dispatch<React.SetStateAction<HasErrorItem>>,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  setComments,\n  setIsLoading,\n  setHasError,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts?.map(post => (\n          <PostItem\n            key={post.id}\n            post={post}\n            selectedPost={selectedPost}\n            setSelectedPost={setSelectedPost}\n            setComments={setComments}\n            setIsLoading={setIsLoading}\n            setHasError={setHasError}\n          />\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { FormEvent, useState } from 'react';\nimport cn from 'classnames';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { addNewComment } from '../utils/helpers';\nimport { LoadingItems } from '../types/LoadingItems';\nimport { FormErrorsItems } from '../types/ErrorMessage';\n\ntype Props = {\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setTempComment: React.Dispatch<React.SetStateAction<Comment | null>>,\n  selectedPost: Post | null,\n  isLoading: LoadingItems,\n  setIsLoading: React.Dispatch<React.SetStateAction<LoadingItems>>,\n\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setComments,\n  setTempComment,\n  selectedPost,\n  isLoading,\n  setIsLoading,\n}) => {\n  const [newName, setNewName] = useState('');\n  const [newEmail, setNewEmail] = useState('');\n  const [newText, setNewText] = useState('');\n  const [formErrors, setFormErrors] = useState<FormErrorsItems []>([]);\n\n  const resetInputs = () => {\n    setNewName('');\n    setNewEmail('');\n    setNewText('');\n  };\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    try {\n      event.preventDefault();\n\n      setIsLoading('Button');\n      let isError = false;\n\n      if (selectedPost) {\n        if (!newName) {\n          setFormErrors(prev => [...prev, 'NameField']);\n          isError = true;\n        }\n\n        if (!newEmail) {\n          setFormErrors(prev => [...prev, 'EmailField']);\n          isError = true;\n        }\n\n        if (!newText) {\n          setFormErrors(prev => [...prev, 'BodyField']);\n          isError = true;\n        }\n\n        if (isError) {\n          return;\n        }\n\n        const newComment = {\n          postId: selectedPost?.id,\n          name: newName.trim(),\n          email: newEmail.trim(),\n          body: newText.trim(),\n        };\n        const temporaryComment = {\n          ...newComment,\n          id: 0,\n        };\n\n        setTempComment(temporaryComment);\n\n        const addedComment = await addNewComment(newComment);\n\n        setNewText('');\n        setTempComment(null);\n        setComments(prevComments => [...prevComments, addedComment]);\n      }\n    } finally {\n      setIsLoading('');\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => handleSubmit(event)}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': formErrors.includes('NameField'),\n            })}\n            value={newName}\n            onChange={event => {\n              setNewName(event.target.value);\n              setFormErrors(prev => prev.filter(err => err !== 'NameField'));\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {formErrors.includes('NameField') && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.includes('NameField') && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': formErrors.includes('EmailField'),\n            })}\n            value={newEmail}\n            onChange={event => {\n              setNewEmail(event.target.value);\n              setFormErrors(prev => prev.filter(err => err !== 'EmailField'));\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {formErrors.includes('EmailField') && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {formErrors.includes('EmailField') && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': formErrors.includes('BodyField'),\n            })}\n            value={newText}\n            onChange={event => {\n              setNewText(event.target.value);\n              setFormErrors(prev => prev.filter(err => err !== 'BodyField'));\n            }}\n          />\n        </div>\n\n        {formErrors.includes('BodyField') && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', {\n              'is-loading': isLoading === 'Button',\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={resetInputs}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\nimport { deleteComment } from '../utils/helpers';\n\ntype Props = {\n  comment: Comment,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n};\n\nexport const CommentItem: React.FC<Props> = ({\n  comment,\n  setComments,\n}) => {\n  const handleDeleteComment = async (commentId: number) => {\n    try {\n      const isDeleted = await deleteComment(commentId);\n\n      if (isDeleted) {\n        setComments(prev => {\n          return prev?.filter(currComment => currComment.id !== commentId);\n        });\n      }\n    } catch {\n      // setErrorMessage('Unable to load todos');\n      // setTimeout(() => setErrorMessage(''), 3000);\n      // throw error;\n    }\n  };\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n          {comment.name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => handleDeleteComment(comment.id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </article>\n\n  // <article className=\"message is-small\" data-cy=\"Comment\">\n  //   <div className=\"message-header\">\n  //     <a\n  //       href=\"mailto:misha@mate.academy\"\n  //       data-cy=\"CommentAuthor\"\n  //     >\n  //       Misha Hrynko\n  //     </a>\n\n  //     <button\n  //       data-cy=\"CommentDelete\"\n  //       type=\"button\"\n  //       className=\"delete is-small\"\n  //       aria-label=\"delete\"\n  //     >\n  //       delete button\n  //     </button>\n  //   </div>\n  //   <div\n  //     className=\"message-body\"\n  //     data-cy=\"CommentBody\"\n  //   >\n  //     One more comment\n  //   </div>\n  // </article>\n\n  // <article className=\"message is-small\" data-cy=\"Comment\">\n  //   <div className=\"message-header\">\n  //     <a\n  //       href=\"mailto:misha@mate.academy\"\n  //       data-cy=\"CommentAuthor\"\n  //     >\n  //       Misha Hrynko\n  //     </a>\n\n  //     <button\n  //       data-cy=\"CommentDelete\"\n  //       type=\"button\"\n  //       className=\"delete is-small\"\n  //       aria-label=\"delete\"\n  //     >\n  //       delete button\n  //     </button>\n  //   </div>\n\n  //   <div className=\"message-body\" data-cy=\"CommentBody\">\n  //     {'Multi\\nline\\ncomment'}\n  //   </div>\n  // </article>\n  );\n};\n","import React from 'react';\nimport { CommentItem } from './CommentItem';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comments: Comment[] | null,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  tempComment: Comment | null,\n};\n\nexport const CommentsList: React.FC<Props> = ({\n  comments,\n  setComments,\n  tempComment,\n}) => {\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n\n      {comments?.map(comment => (\n        <CommentItem\n          comment={comment}\n          setComments={setComments}\n        />\n      ))}\n\n      {tempComment && (\n        <CommentItem\n          comment={tempComment}\n          setComments={setComments}\n        />\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { CommentsList } from './CommentsList';\nimport { LoadingItems } from '../types/LoadingItems';\nimport { HasErrorItem } from '../types/ErrorMessage';\n\ntype Props = {\n  selectedPost: Post | null,\n  comments: Comment[] | null,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  isLoading: LoadingItems,\n  setIsLoading: React.Dispatch<React.SetStateAction<LoadingItems>>,\n  hasError: HasErrorItem,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  comments,\n  setComments,\n  isLoading,\n  setIsLoading,\n  hasError,\n}) => {\n  const [tempComment, setTempComment] = useState<Comment | null>(null);\n  const [showCommentForm, setShowCommentForm] = useState(false);\n\n  let elementToRender = <Loader />;\n\n  switch (true) {\n    case isLoading === 'Comments':\n      elementToRender = <Loader />;\n      break;\n    case hasError === 'Comments':\n      elementToRender = (\n        <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n          Something went wrong\n        </div>\n      );\n      break;\n    case !comments?.length:\n      elementToRender = (\n        <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n          No comments yet\n        </p>\n      );\n      break;\n    case !!comments?.length:\n      elementToRender = (\n        <CommentsList\n          comments={comments}\n          setComments={setComments}\n          tempComment={tempComment}\n        />\n      );\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n\n          {elementToRender}\n        </div>\n\n        <div className=\"block\">\n          {!showCommentForm\n            ? (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setShowCommentForm(true)}\n              >\n                Write a comment\n              </button>\n            ) : (\n              <NewCommentForm\n                setComments={setComments}\n                setTempComment={setTempComment}\n                selectedPost={selectedPost}\n                isLoading={isLoading}\n                setIsLoading={setIsLoading}\n              />\n            )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../types/User';\nimport { getPosts } from '../utils/helpers';\nimport { Post } from '../types/Post';\nimport { LoadingItems } from '../types/LoadingItems';\nimport { HasErrorItem } from '../types/ErrorMessage';\n\ntype Props = {\n  users: User[] | null,\n  selectedUser: User | null,\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>,\n  setPosts: React.Dispatch<React.SetStateAction<Post[] | null>>,\n  setIsLoading: React.Dispatch<React.SetStateAction<LoadingItems>>,\n  setHasError: React.Dispatch<React.SetStateAction<HasErrorItem>>,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n  setPosts,\n  setIsLoading,\n  setHasError,\n}) => {\n  const [isListVisible, setIsListVisible] = useState(false);\n\n  const handleSelectedUser = async (user: User) => {\n    try {\n      setSelectedUser(user);\n      setIsListVisible(false);\n      setIsLoading('Posts');\n\n      const postsFromServer = await getPosts(user.id);\n\n      setPosts(postsFromServer);\n    } catch {\n      setHasError('Posts');\n    } finally {\n      setIsLoading('');\n    }\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsListVisible(prev => !prev)}\n        >\n\n          {selectedUser\n            ? (\n              <span>{selectedUser.name}</span>\n            ) : (\n              <span>Choose a user</span>\n            )}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isListVisible && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users?.map(user => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className=\"dropdown-item\"\n                onClick={() => handleSelectedUser(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './utils/helpers';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { LoadingItems } from './types/LoadingItems';\nimport { HasErrorItem } from './types/ErrorMessage';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[] >([]);\n  const [isLoading, setIsLoading] = useState<LoadingItems>('');\n  const [hasError, setHasError] = useState<HasErrorItem>('');\n\n  useEffect(() => {\n    const fetch = async () => {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    };\n\n    fetch();\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      setHasError('');\n    };\n  }, [selectedUser, selectedPost]);\n\n  let elementToRender = <Loader />;\n\n  switch (true) {\n    case isLoading === 'Posts':\n      elementToRender = <Loader />;\n      break;\n    case hasError === 'Posts':\n      elementToRender = (\n        <div\n          className=\"notification is-danger\"\n          data-cy=\"PostsLoadingError\"\n        >\n          Something went wrong!\n        </div>\n      );\n      break;\n    case selectedUser === null:\n      elementToRender = (\n        <p data-cy=\"NoSelectedUser\">\n          No user selected\n        </p>\n      );\n      break;\n    case !!posts?.length:\n      elementToRender = (\n        <PostsList\n          posts={posts}\n          selectedPost={selectedPost}\n          setSelectedPost={setSelectedPost}\n          setComments={setComments}\n          setIsLoading={setIsLoading}\n          setHasError={setHasError}\n        />\n      );\n      break;\n    case !posts?.length:\n      elementToRender = (\n        <div\n          className=\"notification is-warning\"\n          data-cy=\"NoPostsYet\"\n        >\n          No posts yet\n        </div>\n      );\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setPosts={setPosts}\n                  setIsLoading={setIsLoading}\n                  setHasError={setHasError}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {elementToRender}\n              </div>\n            </div>\n          </div>\n\n          {selectedPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                  comments={comments}\n                  setComments={setComments}\n                  isLoading={isLoading}\n                  setIsLoading={setIsLoading}\n                  hasError={hasError}\n                />\n              </div>\n            </div>\n          )}\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}